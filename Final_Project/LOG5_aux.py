#!/usr/bin/env python

'''
Auxiliary functions for LOG5 EoS model.
Analytical expressions generated by Maple 16
'''

from numpy import sqrt, exp, log, zeros, asarray, sort

def LOG5_V0(b, c, d, e, V):
    '''
    Analytical equilibrium volume
    '''
    b = b.astype(complex)
    c = c.astype(complex)
    d = d.astype(complex)
    e = e.astype(complex)
    V0 = zeros((len(b),3))
    
    import warnings
    with warnings.catch_warnings():
        warnings.simplefilter("ignore") # Ignore complex-to-real casting warning
        V0[:,0] = exp(0.1e1/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(0.1e1/0.3e1)/0.12e2-(8*c*e-3*d**2)/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(-0.1e1/0.3e1)/0.4e1-(d/e)/0.4e1)
        V0[:,1] = exp(-(0.1e1/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(0.1e1/0.3e1)/0.24e2)+((8*c*e-3*d**2)/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(-0.1e1/0.3e1)/0.8e1)-((d/e)/0.4e1)+(0.1e1/0.2e1*1j)*sqrt(0.3e1)*(0.1e1/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(0.1e1/0.3e1)/0.12e2+(8*c*e-3*d**2)/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(-0.1e1/0.3e1)/0.4e1))
        V0[:,2] = exp(-(0.1e1/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(0.1e1/0.3e1)/0.24e2)+((8*c*e-3*d**2)/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(-0.1e1/0.3e1)/0.8e1)-((d/e)/0.4e1)+(-0.1e1/0.2e1*1j)*sqrt(0.3e1)*(0.1e1/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(0.1e1/0.3e1)/0.12e2+(8*c*e-3*d**2)/e*((108*c*d*e)-(216*b*e**2)-(27*d**3)+0.12e2*sqrt(0.3e1)*sqrt((27*d**3*b-9*d**2*c**2-108*d*c*b*e+108*e**2*b**2+32*e*c**3))*e)**(-0.1e1/0.3e1)/0.4e1))
    V0_vals = zeros((len(b),1))
    
    # Check the volume values that are valid
    for i in range(len(b)):
        v = [V0[i,0], V0[i,1], V0[i,2]]
        for vi in v:
            if (vi >= 0.0 and vi >= min(V) and vi <= max(V)):
                V0_vals[i] = vi
                break
    V0_vals_ind = (V0_vals != 0.0).any(axis=1)
    V0_vals = V0_vals[V0_vals_ind]
    return sort(V0_vals_ind), sort(asarray(V0_vals[:,0]))

def LOG5_E0(a, b, c, d, e, V):
    '''
    Analytical equilibrium energy
    '''
    return sort(a+b*log(V)+c*log(V)**2+d*log(V)**3+e*log(V)**4)

def LOG5_B0(b, c, d, e, V):
    '''
    Analytical equilibrium bulk modulus
    '''
    return sort(-(b/V)+(2*c/V)-0.2e1*c*log(V)/V+0.6e1*d*log(V)/V-0.3e1*d*log(V)**2/V+0.12e2*e*log(V)**2/V-0.4e1*e*log(V)**3/V)
    
def LOG5_B0p(b, c, d, e, V):
    '''
    Analytical equilibrium first derivative of the bulk modulus
    '''
    return sort(-(b-(4*c)+0.2e1*c*log(V)+(6*d)-0.12e2*d*log(V)+0.3e1*d*log(V)**2+0.24e2*e*log(V)-0.24e2*e*log(V)**2+0.4e1*e*log(V)**3)/V/(c+0.3e1*d*log(V)+0.6e1*e*log(V)**2)/0.2e1)

def LOG5_B0pp(b, c, d, e, V):
    '''
    Analytical equilibrium second derivative of the bulk modulus
    '''
    return sort(-((c*b)+(3*d*b)+(6*d*c)-(24*e*c)-(6*c**2)+(18*d**2)+0.3e1*b*d*log(V)+0.12e2*b*e*log(V)+0.6e1*b*e*log(V)**2-0.30e2*c*d*log(V)+0.9e1*c*d*log(V)**2+0.24e2*c*e*log(V)-0.48e2*c*e*log(V)**2+0.16e2*c*e*log(V)**3+0.72e2*d*e*log(V)+0.108e3*d*e*log(V)**2-0.168e3*d*e*log(V)**3+0.30e2*d*log(V)**4*e+0.144e3*(e**2)*log(V)**3-0.168e3*(e**2)*log(V)**4+0.24e2*(e**2)*log(V)**5+0.2e1*(c**2)*log(V)+0.18e2*(d**2)*log(V)-0.45e2*(d**2)*log(V)**2+0.9e1*(d**2)*log(V)**3+0.144e3*(e**2)*log(V)**2)/V/(c+0.3e1*d*log(V)+0.6e1*e*log(V)**2)**3/0.4e1)