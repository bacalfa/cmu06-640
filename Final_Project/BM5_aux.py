#!/usr/bin/env python

'''
Auxiliary functions for BM5 EoS model.
Analytical expressions generated by Maple 16
'''

from numpy import sqrt, zeros, asarray, sort

def BM5_V0(b, c, d, e, V):
    '''
    Analytical equilibrium volume
    '''
    b = b.astype(complex)
    c = c.astype(complex)
    d = d.astype(complex)
    e = e.astype(complex)
    V0 = zeros((len(b),6))
    
    import warnings
    with warnings.catch_warnings():
        warnings.simplefilter("ignore") # Ignore complex-to-real casting warning
        V0[:,0] = 0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)*sqrt(0.3e1)*sqrt(b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1)-(9*b*d)+(4*c**2)-0.2e1*c*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)))*(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.3e1-(9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.3e1-0.2e1/0.3e1*c/b)/0.3e1
        V0[:,1] = -0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)*sqrt(0.3e1)*sqrt(b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1)-(9*b*d)+(4*c**2)-0.2e1*c*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)))*(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.3e1-(9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.3e1-0.2e1/0.3e1*c/b)/0.3e1
        V0[:,2] = 0.1e1/b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1))*sqrt(0.6e1)*sqrt(b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))*(-(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))+(9*b*d)-(4*c**2)-(0.4e1*c*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))+(1.0j)*sqrt(0.3e1)*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))+(9j)*sqrt(0.3e1)*b*d+(-4j)*sqrt(0.3e1)*(c**2)))*(-(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.6e1)+((9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.6e1)-(0.2e1/0.3e1*c/b)+(0.1e1/0.2e1j)*sqrt(0.3e1)*(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.3e1+(9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.3e1))/6
        V0[:,3] = -0.1e1/b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1))*sqrt(0.6e1)*sqrt(b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))*(-(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))+(9*b*d)-(4*c**2)-(0.4e1*c*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))+(1.0j)*sqrt(0.3e1)*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))+(9j)*sqrt(0.3e1)*b*d+(-4j)*sqrt(0.3e1)*(c**2)))*(-(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.6e1)+((9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.6e1)-(0.2e1/0.3e1*c/b)+(0.1e1/0.2e1j)*sqrt(0.3e1)*(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.3e1+(9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.3e1))/6
        V0[:,4] = 0.1e1/b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1))*sqrt(-6*b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))*((((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))-(9*b*d)+(4*c**2)+(0.4e1*c*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))+(1.0j)*sqrt(0.3e1)*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))+(9j)*sqrt(0.3e1)*b*d+(-4j)*sqrt(0.3e1)*(c**2)))*(-(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.6e1)+((9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.6e1)-(0.2e1/0.3e1*c/b)+(-0.1e1/0.2e1j)*sqrt(0.3e1)*(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.3e1+(9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.3e1))/6
        V0[:,5] = -0.1e1/b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1))*sqrt(-6*b*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))*((((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))-(9*b*d)+(4*c**2)+(0.4e1*c*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1))+(1.0j)*sqrt(0.3e1)*(((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.2e1/0.3e1))+(9j)*sqrt(0.3e1)*b*d+(-4j)*sqrt(0.3e1)*(c**2)))*(-(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.6e1)+((9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.6e1)-(0.2e1/0.3e1*c/b)+(-0.1e1/0.2e1j)*sqrt(0.3e1)*(0.1e1/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(0.1e1/0.3e1)/0.3e1+(9*b*d-4*c**2)/b*((27*b*c*d)-(54*b**2*e)-(8*c**3)+0.3e1*sqrt(0.3e1)*sqrt((108*e**2*b**2+27*b*d**3-108*b*d*c*e-9*d**2*c**2+32*c**3*e))*b)**(-0.1e1/0.3e1)/0.3e1))/6
    V0_vals = zeros((len(b),1))
    
    # Check the volume values that are valid
    for i in range(len(b)):
        v = [V0[i,0], V0[i,1], V0[i,2], V0[i,3], V0[i,4], V0[i,5]]
        for vi in v:
            if (vi >= 0.0 and vi >= min(V) and vi <= max(V)):
                V0_vals[i] = vi
                break
    V0_vals_ind = (V0_vals != 0.0).any(axis=1)
    V0_vals = V0_vals[V0_vals_ind]
    return sort(V0_vals_ind), sort(asarray(V0_vals[:,0]))

def BM5_E0(a, b, c, d, e, V):
    '''
    Analytical equilibrium energy
    '''
    return sort(a+b*V**(-0.2e1/0.3e1)+c*V**(-0.4e1/0.3e1)+d/V**2+e*V**(-0.8e1/0.3e1))

def BM5_B0(b, c, d, e, V):
    '''
    Analytical equilibrium bulk modulus
    '''
    return sort(0.10e2/0.9e1*b*V**(-0.5e1/0.3e1)+0.28e2/0.9e1*c*V**(-0.7e1/0.3e1)+0.6e1*d/V**3+0.88e2/0.9e1*e*V**(-0.11e2/0.3e1))

def BM5_B0p(b, c, d, e, V):
    '''
    Analytical equilibrium first derivative of the bulk modulus
    '''
    return sort(((25*b*V**2+98*c*V**(0.4e1/0.3e1)+243*d*V**(0.2e1/0.3e1)+484*e)/V/(b*V**2+4*c*V**(0.4e1/0.3e1)+9*d*V**(0.2e1/0.3e1)+16*e))/0.6e1)

def BM5_B0pp(b, c, d, e, V):
    '''
    Analytical equilibrium second derivative of the bulk modulus
    '''
    return sort((V**(0.5e1/0.3e1)*(23232*e**2+75*b**2*V**4+1176*V**(0.8e1/0.3e1)*c**2+6561*d**2*V**(0.4e1/0.3e1)+590*c*V**(0.10e2/0.3e1)*b+1476*b*V**(0.8e1/0.3e1)*d+3156*b*V**2*e+5742*c*V**2*d+11984*e*V**(0.4e1/0.3e1)*c+25668*d*V**(0.2e1/0.3e1)*e)/(b*V**2+4*c*V**(0.4e1/0.3e1)+9*d*V**(0.2e1/0.3e1)+16*e)**3)/0.8e1)