#!/usr/bin/env python

'''
Auxiliary functions for LOG4 EoS model.
Analytical expressions generated by Maple 16
'''

from numpy import sqrt, exp, log, zeros, asarray, sort

def LOG4_V0(b, c, d, V):
    '''
    Analytical equilibrium volume
    '''
    b = b.astype(complex)
    c = c.astype(complex)
    d = d.astype(complex)
    V0 = zeros((len(b),2))
    
    import warnings
    with warnings.catch_warnings():
        warnings.simplefilter("ignore") # Ignore complex-to-real casting warning
        V0[:,0] = exp((-c+sqrt((c**2-3*b*d)))/d/0.3e1)
        V0[:,1] = exp(-(c+sqrt((c**2-3*b*d)))/d/0.3e1)
    V0_vals = zeros((len(b),1))
    
    # Check the volume values that are valid
    for i in range(len(b)):
        v = [V0[i,0], V0[i,1]]
        for vi in v:
            if (vi >= 0.0 and vi >= min(V) and vi <= max(V)):
                V0_vals[i] = vi
                break
    V0_vals_ind = (V0_vals != 0.0).any(axis=1)
    V0_vals = V0_vals[V0_vals_ind]
    return sort(V0_vals_ind), sort(asarray(V0_vals[:,0]))

def LOG4_E0(a, b, c, d, V):
    '''
    Analytical equilibrium energy
    '''
    return sort(a+b*log(V)+c*log(V)**2+d*log(V)**3)

def LOG4_B0(b, c, d, V):
    '''
    Analytical equilibrium bulk modulus
    '''
    return sort(-(b/V)+(2*c/V)-0.2e1*c*log(V)/V+0.6e1*d*log(V)/V-0.3e1*d*log(V)**2/V)

def LOG4_B0p(b, c, d, V):
    '''
    Analytical equilibrium first derivative of the bulk modulus
    '''
    return sort(-(b-(4*c)+0.2e1*c*log(V)+(6*d)-0.12e2*d*log(V)+0.3e1*d*log(V)**2)/V/(c+0.3e1*d*log(V))/0.2e1)